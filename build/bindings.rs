/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod gli {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const format_FORMAT_UNDEFINED: root::gli::format = 0;
        pub const format_FORMAT_RG4_UNORM_PACK8: root::gli::format = 1;
        pub const format_FORMAT_FIRST: root::gli::format = 1;
        pub const format_FORMAT_RGBA4_UNORM_PACK16: root::gli::format = 2;
        pub const format_FORMAT_BGRA4_UNORM_PACK16: root::gli::format = 3;
        pub const format_FORMAT_R5G6B5_UNORM_PACK16: root::gli::format = 4;
        pub const format_FORMAT_B5G6R5_UNORM_PACK16: root::gli::format = 5;
        pub const format_FORMAT_RGB5A1_UNORM_PACK16: root::gli::format = 6;
        pub const format_FORMAT_BGR5A1_UNORM_PACK16: root::gli::format = 7;
        pub const format_FORMAT_A1RGB5_UNORM_PACK16: root::gli::format = 8;
        pub const format_FORMAT_R8_UNORM_PACK8: root::gli::format = 9;
        pub const format_FORMAT_R8_SNORM_PACK8: root::gli::format = 10;
        pub const format_FORMAT_R8_USCALED_PACK8: root::gli::format = 11;
        pub const format_FORMAT_R8_SSCALED_PACK8: root::gli::format = 12;
        pub const format_FORMAT_R8_UINT_PACK8: root::gli::format = 13;
        pub const format_FORMAT_R8_SINT_PACK8: root::gli::format = 14;
        pub const format_FORMAT_R8_SRGB_PACK8: root::gli::format = 15;
        pub const format_FORMAT_RG8_UNORM_PACK8: root::gli::format = 16;
        pub const format_FORMAT_RG8_SNORM_PACK8: root::gli::format = 17;
        pub const format_FORMAT_RG8_USCALED_PACK8: root::gli::format = 18;
        pub const format_FORMAT_RG8_SSCALED_PACK8: root::gli::format = 19;
        pub const format_FORMAT_RG8_UINT_PACK8: root::gli::format = 20;
        pub const format_FORMAT_RG8_SINT_PACK8: root::gli::format = 21;
        pub const format_FORMAT_RG8_SRGB_PACK8: root::gli::format = 22;
        pub const format_FORMAT_RGB8_UNORM_PACK8: root::gli::format = 23;
        pub const format_FORMAT_RGB8_SNORM_PACK8: root::gli::format = 24;
        pub const format_FORMAT_RGB8_USCALED_PACK8: root::gli::format = 25;
        pub const format_FORMAT_RGB8_SSCALED_PACK8: root::gli::format = 26;
        pub const format_FORMAT_RGB8_UINT_PACK8: root::gli::format = 27;
        pub const format_FORMAT_RGB8_SINT_PACK8: root::gli::format = 28;
        pub const format_FORMAT_RGB8_SRGB_PACK8: root::gli::format = 29;
        pub const format_FORMAT_BGR8_UNORM_PACK8: root::gli::format = 30;
        pub const format_FORMAT_BGR8_SNORM_PACK8: root::gli::format = 31;
        pub const format_FORMAT_BGR8_USCALED_PACK8: root::gli::format = 32;
        pub const format_FORMAT_BGR8_SSCALED_PACK8: root::gli::format = 33;
        pub const format_FORMAT_BGR8_UINT_PACK8: root::gli::format = 34;
        pub const format_FORMAT_BGR8_SINT_PACK8: root::gli::format = 35;
        pub const format_FORMAT_BGR8_SRGB_PACK8: root::gli::format = 36;
        pub const format_FORMAT_RGBA8_UNORM_PACK8: root::gli::format = 37;
        pub const format_FORMAT_RGBA8_SNORM_PACK8: root::gli::format = 38;
        pub const format_FORMAT_RGBA8_USCALED_PACK8: root::gli::format = 39;
        pub const format_FORMAT_RGBA8_SSCALED_PACK8: root::gli::format = 40;
        pub const format_FORMAT_RGBA8_UINT_PACK8: root::gli::format = 41;
        pub const format_FORMAT_RGBA8_SINT_PACK8: root::gli::format = 42;
        pub const format_FORMAT_RGBA8_SRGB_PACK8: root::gli::format = 43;
        pub const format_FORMAT_BGRA8_UNORM_PACK8: root::gli::format = 44;
        pub const format_FORMAT_BGRA8_SNORM_PACK8: root::gli::format = 45;
        pub const format_FORMAT_BGRA8_USCALED_PACK8: root::gli::format = 46;
        pub const format_FORMAT_BGRA8_SSCALED_PACK8: root::gli::format = 47;
        pub const format_FORMAT_BGRA8_UINT_PACK8: root::gli::format = 48;
        pub const format_FORMAT_BGRA8_SINT_PACK8: root::gli::format = 49;
        pub const format_FORMAT_BGRA8_SRGB_PACK8: root::gli::format = 50;
        pub const format_FORMAT_RGBA8_UNORM_PACK32: root::gli::format = 51;
        pub const format_FORMAT_RGBA8_SNORM_PACK32: root::gli::format = 52;
        pub const format_FORMAT_RGBA8_USCALED_PACK32: root::gli::format = 53;
        pub const format_FORMAT_RGBA8_SSCALED_PACK32: root::gli::format = 54;
        pub const format_FORMAT_RGBA8_UINT_PACK32: root::gli::format = 55;
        pub const format_FORMAT_RGBA8_SINT_PACK32: root::gli::format = 56;
        pub const format_FORMAT_RGBA8_SRGB_PACK32: root::gli::format = 57;
        pub const format_FORMAT_RGB10A2_UNORM_PACK32: root::gli::format = 58;
        pub const format_FORMAT_RGB10A2_SNORM_PACK32: root::gli::format = 59;
        pub const format_FORMAT_RGB10A2_USCALED_PACK32: root::gli::format = 60;
        pub const format_FORMAT_RGB10A2_SSCALED_PACK32: root::gli::format = 61;
        pub const format_FORMAT_RGB10A2_UINT_PACK32: root::gli::format = 62;
        pub const format_FORMAT_RGB10A2_SINT_PACK32: root::gli::format = 63;
        pub const format_FORMAT_BGR10A2_UNORM_PACK32: root::gli::format = 64;
        pub const format_FORMAT_BGR10A2_SNORM_PACK32: root::gli::format = 65;
        pub const format_FORMAT_BGR10A2_USCALED_PACK32: root::gli::format = 66;
        pub const format_FORMAT_BGR10A2_SSCALED_PACK32: root::gli::format = 67;
        pub const format_FORMAT_BGR10A2_UINT_PACK32: root::gli::format = 68;
        pub const format_FORMAT_BGR10A2_SINT_PACK32: root::gli::format = 69;
        pub const format_FORMAT_R16_UNORM_PACK16: root::gli::format = 70;
        pub const format_FORMAT_R16_SNORM_PACK16: root::gli::format = 71;
        pub const format_FORMAT_R16_USCALED_PACK16: root::gli::format = 72;
        pub const format_FORMAT_R16_SSCALED_PACK16: root::gli::format = 73;
        pub const format_FORMAT_R16_UINT_PACK16: root::gli::format = 74;
        pub const format_FORMAT_R16_SINT_PACK16: root::gli::format = 75;
        pub const format_FORMAT_R16_SFLOAT_PACK16: root::gli::format = 76;
        pub const format_FORMAT_RG16_UNORM_PACK16: root::gli::format = 77;
        pub const format_FORMAT_RG16_SNORM_PACK16: root::gli::format = 78;
        pub const format_FORMAT_RG16_USCALED_PACK16: root::gli::format = 79;
        pub const format_FORMAT_RG16_SSCALED_PACK16: root::gli::format = 80;
        pub const format_FORMAT_RG16_UINT_PACK16: root::gli::format = 81;
        pub const format_FORMAT_RG16_SINT_PACK16: root::gli::format = 82;
        pub const format_FORMAT_RG16_SFLOAT_PACK16: root::gli::format = 83;
        pub const format_FORMAT_RGB16_UNORM_PACK16: root::gli::format = 84;
        pub const format_FORMAT_RGB16_SNORM_PACK16: root::gli::format = 85;
        pub const format_FORMAT_RGB16_USCALED_PACK16: root::gli::format = 86;
        pub const format_FORMAT_RGB16_SSCALED_PACK16: root::gli::format = 87;
        pub const format_FORMAT_RGB16_UINT_PACK16: root::gli::format = 88;
        pub const format_FORMAT_RGB16_SINT_PACK16: root::gli::format = 89;
        pub const format_FORMAT_RGB16_SFLOAT_PACK16: root::gli::format = 90;
        pub const format_FORMAT_RGBA16_UNORM_PACK16: root::gli::format = 91;
        pub const format_FORMAT_RGBA16_SNORM_PACK16: root::gli::format = 92;
        pub const format_FORMAT_RGBA16_USCALED_PACK16: root::gli::format = 93;
        pub const format_FORMAT_RGBA16_SSCALED_PACK16: root::gli::format = 94;
        pub const format_FORMAT_RGBA16_UINT_PACK16: root::gli::format = 95;
        pub const format_FORMAT_RGBA16_SINT_PACK16: root::gli::format = 96;
        pub const format_FORMAT_RGBA16_SFLOAT_PACK16: root::gli::format = 97;
        pub const format_FORMAT_R32_UINT_PACK32: root::gli::format = 98;
        pub const format_FORMAT_R32_SINT_PACK32: root::gli::format = 99;
        pub const format_FORMAT_R32_SFLOAT_PACK32: root::gli::format = 100;
        pub const format_FORMAT_RG32_UINT_PACK32: root::gli::format = 101;
        pub const format_FORMAT_RG32_SINT_PACK32: root::gli::format = 102;
        pub const format_FORMAT_RG32_SFLOAT_PACK32: root::gli::format = 103;
        pub const format_FORMAT_RGB32_UINT_PACK32: root::gli::format = 104;
        pub const format_FORMAT_RGB32_SINT_PACK32: root::gli::format = 105;
        pub const format_FORMAT_RGB32_SFLOAT_PACK32: root::gli::format = 106;
        pub const format_FORMAT_RGBA32_UINT_PACK32: root::gli::format = 107;
        pub const format_FORMAT_RGBA32_SINT_PACK32: root::gli::format = 108;
        pub const format_FORMAT_RGBA32_SFLOAT_PACK32: root::gli::format = 109;
        pub const format_FORMAT_R64_UINT_PACK64: root::gli::format = 110;
        pub const format_FORMAT_R64_SINT_PACK64: root::gli::format = 111;
        pub const format_FORMAT_R64_SFLOAT_PACK64: root::gli::format = 112;
        pub const format_FORMAT_RG64_UINT_PACK64: root::gli::format = 113;
        pub const format_FORMAT_RG64_SINT_PACK64: root::gli::format = 114;
        pub const format_FORMAT_RG64_SFLOAT_PACK64: root::gli::format = 115;
        pub const format_FORMAT_RGB64_UINT_PACK64: root::gli::format = 116;
        pub const format_FORMAT_RGB64_SINT_PACK64: root::gli::format = 117;
        pub const format_FORMAT_RGB64_SFLOAT_PACK64: root::gli::format = 118;
        pub const format_FORMAT_RGBA64_UINT_PACK64: root::gli::format = 119;
        pub const format_FORMAT_RGBA64_SINT_PACK64: root::gli::format = 120;
        pub const format_FORMAT_RGBA64_SFLOAT_PACK64: root::gli::format = 121;
        pub const format_FORMAT_RG11B10_UFLOAT_PACK32: root::gli::format = 122;
        pub const format_FORMAT_RGB9E5_UFLOAT_PACK32: root::gli::format = 123;
        pub const format_FORMAT_D16_UNORM_PACK16: root::gli::format = 124;
        pub const format_FORMAT_D24_UNORM_PACK32: root::gli::format = 125;
        pub const format_FORMAT_D32_SFLOAT_PACK32: root::gli::format = 126;
        pub const format_FORMAT_S8_UINT_PACK8: root::gli::format = 127;
        pub const format_FORMAT_D16_UNORM_S8_UINT_PACK32: root::gli::format = 128;
        pub const format_FORMAT_D24_UNORM_S8_UINT_PACK32: root::gli::format = 129;
        pub const format_FORMAT_D32_SFLOAT_S8_UINT_PACK64: root::gli::format = 130;
        pub const format_FORMAT_RGB_DXT1_UNORM_BLOCK8: root::gli::format = 131;
        pub const format_FORMAT_RGB_DXT1_SRGB_BLOCK8: root::gli::format = 132;
        pub const format_FORMAT_RGBA_DXT1_UNORM_BLOCK8: root::gli::format = 133;
        pub const format_FORMAT_RGBA_DXT1_SRGB_BLOCK8: root::gli::format = 134;
        pub const format_FORMAT_RGBA_DXT3_UNORM_BLOCK16: root::gli::format = 135;
        pub const format_FORMAT_RGBA_DXT3_SRGB_BLOCK16: root::gli::format = 136;
        pub const format_FORMAT_RGBA_DXT5_UNORM_BLOCK16: root::gli::format = 137;
        pub const format_FORMAT_RGBA_DXT5_SRGB_BLOCK16: root::gli::format = 138;
        pub const format_FORMAT_R_ATI1N_UNORM_BLOCK8: root::gli::format = 139;
        pub const format_FORMAT_R_ATI1N_SNORM_BLOCK8: root::gli::format = 140;
        pub const format_FORMAT_RG_ATI2N_UNORM_BLOCK16: root::gli::format = 141;
        pub const format_FORMAT_RG_ATI2N_SNORM_BLOCK16: root::gli::format = 142;
        pub const format_FORMAT_RGB_BP_UFLOAT_BLOCK16: root::gli::format = 143;
        pub const format_FORMAT_RGB_BP_SFLOAT_BLOCK16: root::gli::format = 144;
        pub const format_FORMAT_RGBA_BP_UNORM_BLOCK16: root::gli::format = 145;
        pub const format_FORMAT_RGBA_BP_SRGB_BLOCK16: root::gli::format = 146;
        pub const format_FORMAT_RGB_ETC2_UNORM_BLOCK8: root::gli::format = 147;
        pub const format_FORMAT_RGB_ETC2_SRGB_BLOCK8: root::gli::format = 148;
        pub const format_FORMAT_RGBA_ETC2_UNORM_BLOCK8: root::gli::format = 149;
        pub const format_FORMAT_RGBA_ETC2_SRGB_BLOCK8: root::gli::format = 150;
        pub const format_FORMAT_RGBA_ETC2_UNORM_BLOCK16: root::gli::format = 151;
        pub const format_FORMAT_RGBA_ETC2_SRGB_BLOCK16: root::gli::format = 152;
        pub const format_FORMAT_R_EAC_UNORM_BLOCK8: root::gli::format = 153;
        pub const format_FORMAT_R_EAC_SNORM_BLOCK8: root::gli::format = 154;
        pub const format_FORMAT_RG_EAC_UNORM_BLOCK16: root::gli::format = 155;
        pub const format_FORMAT_RG_EAC_SNORM_BLOCK16: root::gli::format = 156;
        pub const format_FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16: root::gli::format = 157;
        pub const format_FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16: root::gli::format = 158;
        pub const format_FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16: root::gli::format = 159;
        pub const format_FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16: root::gli::format = 160;
        pub const format_FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16: root::gli::format = 161;
        pub const format_FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16: root::gli::format = 162;
        pub const format_FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16: root::gli::format = 163;
        pub const format_FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16: root::gli::format = 164;
        pub const format_FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16: root::gli::format = 165;
        pub const format_FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16: root::gli::format = 166;
        pub const format_FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16: root::gli::format = 167;
        pub const format_FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16: root::gli::format = 168;
        pub const format_FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16: root::gli::format = 169;
        pub const format_FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16: root::gli::format = 170;
        pub const format_FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16: root::gli::format = 171;
        pub const format_FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16: root::gli::format = 172;
        pub const format_FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16: root::gli::format = 173;
        pub const format_FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16: root::gli::format = 174;
        pub const format_FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16: root::gli::format = 175;
        pub const format_FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16: root::gli::format = 176;
        pub const format_FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16: root::gli::format = 177;
        pub const format_FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16: root::gli::format = 178;
        pub const format_FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16: root::gli::format = 179;
        pub const format_FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16: root::gli::format = 180;
        pub const format_FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16: root::gli::format = 181;
        pub const format_FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16: root::gli::format = 182;
        pub const format_FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16: root::gli::format = 183;
        pub const format_FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16: root::gli::format = 184;
        pub const format_FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32: root::gli::format = 185;
        pub const format_FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32: root::gli::format = 186;
        pub const format_FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32: root::gli::format = 187;
        pub const format_FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32: root::gli::format = 188;
        pub const format_FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32: root::gli::format = 189;
        pub const format_FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32: root::gli::format = 190;
        pub const format_FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32: root::gli::format = 191;
        pub const format_FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32: root::gli::format = 192;
        pub const format_FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8: root::gli::format = 193;
        pub const format_FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8: root::gli::format = 194;
        pub const format_FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8: root::gli::format = 195;
        pub const format_FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8: root::gli::format = 196;
        pub const format_FORMAT_RGB_ETC_UNORM_BLOCK8: root::gli::format = 197;
        pub const format_FORMAT_RGB_ATC_UNORM_BLOCK8: root::gli::format = 198;
        pub const format_FORMAT_RGBA_ATCA_UNORM_BLOCK16: root::gli::format = 199;
        pub const format_FORMAT_RGBA_ATCI_UNORM_BLOCK16: root::gli::format = 200;
        pub const format_FORMAT_L8_UNORM_PACK8: root::gli::format = 201;
        pub const format_FORMAT_A8_UNORM_PACK8: root::gli::format = 202;
        pub const format_FORMAT_LA8_UNORM_PACK8: root::gli::format = 203;
        pub const format_FORMAT_L16_UNORM_PACK16: root::gli::format = 204;
        pub const format_FORMAT_A16_UNORM_PACK16: root::gli::format = 205;
        pub const format_FORMAT_LA16_UNORM_PACK16: root::gli::format = 206;
        pub const format_FORMAT_BGR8_UNORM_PACK32: root::gli::format = 207;
        pub const format_FORMAT_BGR8_SRGB_PACK32: root::gli::format = 208;
        pub const format_FORMAT_RG3B2_UNORM_PACK8: root::gli::format = 209;
        pub const format_FORMAT_LAST: root::gli::format = 209;
        #[doc = " Texture data format"]
        pub type format = u32;
        pub const swizzle_SWIZZLE_RED: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_FIRST: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_CHANNEL_FIRST: root::gli::swizzle = 0;
        pub const swizzle_SWIZZLE_GREEN: root::gli::swizzle = 1;
        pub const swizzle_SWIZZLE_BLUE: root::gli::swizzle = 2;
        pub const swizzle_SWIZZLE_ALPHA: root::gli::swizzle = 3;
        pub const swizzle_SWIZZLE_CHANNEL_LAST: root::gli::swizzle = 3;
        pub const swizzle_SWIZZLE_ZERO: root::gli::swizzle = 4;
        pub const swizzle_SWIZZLE_ONE: root::gli::swizzle = 5;
        pub const swizzle_SWIZZLE_LAST: root::gli::swizzle = 5;
        #[doc = " Represent the source of a channel"]
        pub type swizzle = u32;
        pub type swizzles = [u32; 4usize];
        extern "C" {
            #[doc = " Evaluate whether a format is compressed"]
            pub fn is_compressed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is compressed with an S3TC algorithm."]
            pub fn is_s3tc_compressed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format stores sRGB color space values"]
            pub fn is_srgb(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is unsigned"]
            pub fn is_unsigned(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether a format is signed"]
            pub fn is_signed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an integer format"]
            pub fn is_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a signed integer format"]
            pub fn is_signed_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an unsigned integer format"]
            pub fn is_unsigned_integer(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an float format"]
            pub fn is_float(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is normalized"]
            pub fn is_normalized(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is an unsigned normalized format"]
            pub fn is_unorm(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a signed normalized format"]
            pub fn is_snorm(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is packed"]
            pub fn is_packed(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format is a depth format"]
            pub fn is_depth(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format has a stencil component"]
            pub fn is_stencil(Format: root::gli::format) -> bool;
        }
        extern "C" {
            #[doc = " Evaluate whether the format has depth and stencil components"]
            pub fn is_depth_stencil(Format: root::gli::format) -> bool;
        }
        pub mod detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod glm {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
}
